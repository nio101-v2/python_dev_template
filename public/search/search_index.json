{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"welcome to the project documentation","text":"<p>this documentation is automatically generated from docstrings</p>"},{"location":"main/","title":"<code>main.py</code> demo file","text":"<p>main template demo</p> <p>provides a skeleton/sample file + demo</p>"},{"location":"main/#main.helping_function","title":"<code>helping_function()</code>","text":"<p>fake gelping function</p> Source code in <code>main.py</code> <pre><code>def helping_function():\n    \"\"\"\n    fake gelping function\n    \"\"\"\n    return\n</code></pre>"},{"location":"main/#main.main","title":"<code>main()</code>","text":"<p>demo main loop</p> Source code in <code>main.py</code> <pre><code>def main():\n    \"\"\"demo main loop\"\"\"\n    console = Console()\n\n    # prepare logging\n    LOGFORMAT = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n    LOGFORMAT_RICH = '%(message)s'\n    error_console = Console(stderr=True)\n    rh = RichHandler(console=error_console)\n    rh.setFormatter(Formatter(LOGFORMAT_RICH))\n    # setting up the log, here with a basic one-shot log file\n    # for rotating file, see comment below\n    logging.basicConfig(\n        level=logging.WARNING,\n        # format=LOGFORMAT,python\n        format=LOGFORMAT,\n        handlers=[\n            rh,\n            # logging.StreamHandler(sys.stderr),\n            FileHandler('main.log', mode='w', encoding=\"UTF-8\", delay=False),\n            # RotatingFileHandler(\n            #     'main.log', maxBytes=1024 * 1024 * 10, backupCount=2  # 10Mb\n            # ),  # only 1 files\n        ],\n    )\n    log = logging.getLogger('main')\n\n    # read .ini config file\n    config = configparser.ConfigParser()\n    config.read(\"config.ini\")\n    startup_wait = config.getint('startup', 'wait')\n    max_delay = config.getint('alive_check', 'max_delay')\n    # also: getfloat, getint, getboolean\n\n    # retrieve and show current local GIT version\n    console.print(\n        tools.get_version(), style=\"orange_red1\", highlight=False, markup=False\n    )\n    # markup is set to false to prevent tag being interpreted as a markup by rich\n    # see https://github.com/textualize/rich/blob/master/FAQ.md#why-does-content-in-square-brackets-disappear\n    console.print(\"\\n[bold magenta]Hello, World![/bold magenta]\\n\")\n\n    # print some fake info\n    fake = Faker()\n    console.print(fake.name())\n    console.print(fake.address())\n    console.print(fake.text(), \"\\n\")\n\n    # and some fake progress bar\n    for i in tqdm(range(100)):\n        sleep(0.005)\n    print(\"\")\n\n    with Progress() as progress:\n        task = progress.add_task(\"Processing...\", total=100)\n        for i in range(100):\n            time.sleep(0.01)\n            progress.update(task, advance=1)\n    print(\"\")\n\n    # use a function from mymodule and test log output\n    new_value = rules.rule_one(1)\n    log.error(\"that's a fatal error!\")\n\n    #\n    # logging.basicConfig(level=\"INFO\", handlers=[RichHandler()])\n    # logging.basicConfig(filename='example.log', encoding='utf-8', level=logging.DEBUG, handlers=[RichHandler()])\n    # log = logging.getLogger(\"rich\")\n\n    # log.info(\"This is an info message.\")\n    # log.error(\"This is an error message.\")\n\n    # done\n    console.print(\"\\n[bold magenta]done![/bold magenta] :thumbs_up:\")\n</code></pre>"},{"location":"mymodule/","title":"<code>mymodule</code>","text":"<p>This module is used for source code structuring. Instead of having one single big python file, we can split and organize the code functions inside the module(s).</p>"},{"location":"rules/","title":"<code>mymodule/rules</code>","text":"<p>rules</p> <p>implement rules</p>"},{"location":"rules/#mymodule.rules.rule_one","title":"<code>rule_one(input_value)</code>","text":"<p>implement rule #1</p> <p>rule_one(5) 6 rule_one(7) 8</p> Source code in <code>mymodule\\rules.py</code> <pre><code>def rule_one(input_value):\n    \"\"\"\n    implement rule #1\n\n    &gt;&gt;&gt; rule_one(5)\n    6\n    &gt;&gt;&gt; rule_one(7)\n    8\n    \"\"\"\n    log.warning(\"rule #1: warning!\")\n    return input_value + 1\n</code></pre>"},{"location":"tools/","title":"<code>mymodule/tools.py</code>","text":"<p>tools</p> <p>various functions</p>"},{"location":"tools/#mymodule.tools.get_version","title":"<code>get_version()</code>","text":"<p>retrieve the current local GIT version info</p> Source code in <code>mymodule\\tools.py</code> <pre><code>def get_version():\n    \"\"\"retrieve the current local GIT version info\"\"\"\n    repo = Repo(search_parent_directories=True)\n    commit_date = arrow.get(repo.commit(\"main\").committed_date).to('local')\n    if len(repo.tags) == 0:\n        log.warning(\"get_version(): warning: no tag set for local git repo\")\n        tag = 'no_tag'\n    else:\n        tag = repo.tags[0]\n    version_string = \"{} [{}] #{} ({})\".format(\n        str(repo.head.reference), tag, repo.head.object.hexsha[0:4], commit_date\n    )\n    return version_string\n</code></pre>"}]}